// Generated by LiveScript 1.3.1
(function(){
  var ref$, keys, compact, Obj, path, FileSystem;
  ref$ = require('prelude-ls'), keys = ref$.keys, compact = ref$.compact, Obj = ref$.Obj;
  path = require('path');
  module.exports = FileSystem = (function(){
    FileSystem.displayName = 'FileSystem';
    var prototype = FileSystem.prototype, constructor = FileSystem;
    function FileSystem(process){
      this.process = process;
      this.fs = {
        type: 'directory',
        contents: {}
      };
    }
    prototype._getAtPath = function(targetPath){
      var current, parts, i$, len$, i, part, that;
      current = this.fs;
      parts = compact(targetPath.split('/'));
      for (i$ = 0, len$ = parts.length; i$ < len$; ++i$) {
        i = i$;
        part = parts[i$];
        if (current.type === 'directory') {
          if (that = current.contents[part]) {
            current = that;
            continue;
          }
        }
        throw new Error(targetPath + ": No such file or directory");
      }
      return current;
    };
    prototype.existsSync = function(targetPath){
      var e;
      try {
        this._getAtPath(targetPath);
        return true;
      } catch (e$) {
        e = e$;
        return false;
      }
    };
    prototype.readFileSync = function(targetPath){
      var absPath, node;
      absPath = path.resolve(this.process.cwd(), targetPath);
      node = this._getAtPath(absPath);
      if (node.type === 'directory') {
        throw new Error(absPath + " is directory");
      } else {
        return node.contents;
      }
    };
    prototype.writeFileSync = function(targetPath, data){
      var filename, parent;
      filename = path.basename(targetPath);
      parent = this._getAtPath(path.resolve(this.process.cwd(), targetPath, '..'));
      parent.contents[filename] = {
        type: 'file',
        contents: data
      };
    };
    prototype.appendFileSync = function(targetPath, data){
      var node;
      node = this._getAtPath(path.resolve(this.process.cwd(), targetPath));
      if (/\n$/.test(node.contents)) {
        node.contents += data;
      } else {
        node.contents += "\n" + data;
      }
    };
    prototype.mkdirSync = function(targetPath){
      var dirname, parent;
      dirname = path.basename(targetPath);
      parent = this._getAtPath(path.resolve(this.process.cwd(), targetPath, '..'));
      parent.contents[dirname] = {
        type: 'directory',
        contents: {}
      };
    };
    prototype.readdirSync = function(targetPath){
      var node;
      node = this._getAtPath(path.resolve(this.process.cwd(), targetPath));
      if (node.type === 'file') {
        throw new Error(targetPath + " is file");
      } else {
        return keys(node.contents);
      }
    };
    prototype.lstatSync = function(targetPath){
      var node;
      node = this._getAtPath(path.resolve(this.process.cwd(), targetPath));
      return {
        isDirectory: function(){
          return node.type === 'directory';
        },
        isFile: function(){
          return node.type === 'file';
        }
      };
    };
    prototype.cpSync = function(source, destination){
      var destName, sourceNode, destinationParent;
      destName = path.basename(destination);
      sourceNode = this._getAtPath(path.resolve(this.process.cwd(), source));
      destinationParent = this._getAtPath(path.resolve(this.process.cwd(), destination, '..'));
      return destinationParent.contents[destName] = sourceNode;
    };
    prototype.mvSync = function(source, destination){
      var basename, destName, sourceNode, parentNode, destinationParent;
      basename = path.basename(source);
      destName = path.basename(destination);
      sourceNode = this._getAtPath(path.resolve(this.process.cwd(), source));
      parentNode = this._getAtPath(path.resolve(this.process.cwd(), source, '..'));
      delete parentNode.contents[basename];
      destinationParent = this._getAtPath(path.resolve(this.process.cwd(), destination, '..'));
      return destinationParent.contents[destName] = sourceNode;
    };
    prototype.unlinkSync = function(targetPath, recursive){
      var targetName, resolvedPath, parentPath, parent, that;
      targetName = path.basename(targetPath);
      resolvedPath = path.resolve(this.process.cwd(), targetPath);
      parentPath = path.resolve(resolvedPath, '..');
      parent = this._getAtPath(parentPath);
      if ('/' === resolvedPath) {
        throw new Error('rm: cannot remove root directory');
      } else if (that = parent.contents[targetName]) {
        if (that.type === 'file' || recursive) {
          delete parent.contents[targetName];
        } else {
          throw new Error("rm: cannot remove '" + targetPath + "': Is a directory");
        }
      } else {
        throw new Error("rm: cannot remove '" + targetPath + "': No such file or directory");
      }
    };
    prototype.rmdirSync = function(targetPath){
      var targetName, resolvedPath, parent, that, target;
      targetName = path.basename(targetPath);
      resolvedPath = path.resolve(this.process.cwd(), targetPath, '..');
      parent = this._getAtPath(resolvedPath);
      if ('/' === path.resolve(resolvedPath, targetName)) {
        throw new Error('rmdir: cannot remove root directory');
      } else if (that = parent.contents[targetName]) {
        target = that;
        if (target.type === 'directory') {
          if (Obj.empty(target.contents)) {
            delete parent.contents[targetName];
          } else {
            throw new Error("rmdir: failed to remove '" + targetPath + "': Directory not empty");
          }
        } else {
          throw new Error("rmdir: cannot remove '" + targetPath + "': Not a directory");
        }
      } else {
        throw new Error("rmdir: cannot remove '" + targetPath + "': No such file or directory");
      }
    };
    return FileSystem;
  }());
}).call(this);
