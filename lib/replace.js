// Generated by LiveScript 1.2.0
(function(){
  var ref$, lines, unlines, getRaw, replacer, processReplacement, replace, slice$ = [].slice;
  ref$ = require('prelude-ls'), lines = ref$.lines, unlines = ref$.unlines;
  getRaw = function(input, node){
    var that;
    if (that = node.raw) {
      return that;
    }
    return input.slice(node.start, node.end);
  };
  replacer = function(input, node, queryEngine){
    return function(arg$, selector){
      var results, that;
      results = queryEngine.query(selector, node);
      if (that = results[0]) {
        return getRaw(input, that);
      } else {
        return '';
      }
    };
  };
  processReplacement = function(replacement, input, node, queryEngine){
    return replacement.replace(/\\n/g, '\n').replace(/{{}}/g, getRaw(input, node)).replace(/{{((?:[^}]|}[^}])+)}}/g, replacer(input, node, queryEngine));
  };
  replace = function(replacement, input, nodes, queryEngine){
    var inputLines, colOffset, lineOffset, lastLine, prevNode, i$, len$, node, ref$, start, end, startLineNum, endLineNum, numberOfLines, startCol, endCol, replaceLines, startLine, endLine, startContext, endContext, replaceLast, endLen;
    inputLines = lines(input);
    colOffset = 0;
    lineOffset = 0;
    lastLine = null;
    prevNode = {
      end: 0
    };
    for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
      node = nodes[i$];
      if (node.start < prevNode.end) {
        continue;
      }
      ref$ = node.loc, start = ref$.start, end = ref$.end;
      startLineNum = start.line - 1 + lineOffset;
      endLineNum = end.line - 1 + lineOffset;
      numberOfLines = endLineNum - startLineNum + 1;
      colOffset = lastLine === startLineNum ? colOffset : 0;
      startCol = start.column + colOffset;
      endCol = end.column + (startLineNum === endLineNum ? colOffset : 0);
      replaceLines = lines(processReplacement(replacement, input, node, queryEngine));
      startLine = inputLines[startLineNum];
      endLine = inputLines[endLineNum];
      startContext = startLine.slice(0, startCol);
      endContext = endLine.slice(endCol);
      replaceLines[0] = startContext + "" + replaceLines[0];
      replaceLast = replaceLines[replaceLines.length - 1];
      endLen = replaceLast.length;
      replaceLines[replaceLines.length - 1] = replaceLast + "" + endContext;
      inputLines.splice.apply(inputLines, [startLineNum, numberOfLines].concat(slice$.call(replaceLines)));
      lineOffset += replaceLines.length - numberOfLines;
      colOffset = endLen - endCol;
      lastLine = endLineNum + lineOffset;
      prevNode = node;
    }
    return unlines(inputLines).replace(/\n$/, '');
  };
  module.exports = {
    replace: replace
  };
}).call(this);
